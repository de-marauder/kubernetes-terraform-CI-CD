# Kubernetes App Docker image build for hub.docker.com
name: CI/CD

# Run this Build for all pushes to 'master' or develop branch, or tagged releases.
# Also run for PRs to ensure PR doesn't break Docker build process
on:
  push:
    branches:
      - main
      # - develop
    tags:
      - 'v**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # pull_request:
env: 
  AWS_REGION: us-east-1
  # ECR_REPOSITORY: kubernetes-github-actions
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)

permissions:
  contents: read

jobs:
  docker-build-push:
    # Ensure this job never runs on forked repos. It's only executed for 'snipe/snipe-it'
    # if: github.repository == 'snipe/snipe-it'
    runs-on: ubuntu-latest
    env:
      # Define tags to use for Docker images based on Git tags/branches (for docker/metadata-action)
      # For a new commit on default branch (master), use the literal tag 'latest' on Docker image.
      # For a new commit on other branches, use the branch name as the tag for Docker image.
      # For a new tag, copy that tag name as the tag for Docker image.
      IMAGE_TAGS: |
        type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
        type=ref,event=branch,enable=${{ !endsWith(github.ref, github.event.repository.default_branch) }}
        type=ref,event=tag
      # Define default tag "flavor" for docker/metadata-action per
      # https://github.com/docker/metadata-action#flavor-input
      # We turn off 'latest' tag by default.
      TAGS_FLAVOR: |
        latest=false
    steps:
      # https://github.com/actions/checkout
      - name: Checkout codebase
        uses: actions/checkout@v3.3.0

      # https://github.com/docker/setup-buildx-action
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      # https://github.com/docker/login-action
      - name: Login to DockerHub
        # Only login if not a PR, as PRs only trigger a Docker build and not a push
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      ###############################################
      # Build/Push the 'demarauder/portfolio' image
      ###############################################
      # https://github.com/docker/metadata-action
      # Get Metadata for docker_build step below
      # - name: Sync metadata (tags, labels) from GitHub to Docker for 'portfolio' image
      #   id: meta_build
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: demarauder/portfolio
      #     tags: ${{ env.IMAGE_TAGS }}
      #     flavor: ${{ env.TAGS_FLAVOR }}

      # https://github.com/docker/build-push-action
      # - name: Build and push 'portfolio' image
      #   id: docker_build
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: ./portfolio
      #     file: ./portfolio/Dockerfile
      #     platforms: linux/amd64
      #     # For pull requests, we run the Docker build (to ensure no PR changes break the build),
      #     # but we ONLY do an image push to DockerHub if it's NOT a PR
      #     push: ${{ github.event_name != 'pull_request' }}
      #     # Use tags / labels provided by 'docker/metadata-action' above
      #     tags: ${{ steps.meta_build.outputs.tags }}
      #     labels: ${{ steps.meta_build.outputs.labels }}

      - name: Build, tag, and push image to Docker hub
        id: build-image
        run: |
          cd portfolio
          docker image build \
          --tag ${{ secrets.DOCKER_USERNAME }}/portfolio:latest \
          --tag ${{ secrets.DOCKER_USERNAME }}/portfolio:${{ env.SHORT_SHA }} \
          .
          docker push ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/portfolio:${{ env.SHORT_SHA }}      

  kube-deploy:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/master'
    needs:
      - docker-build-push

    steps:
    - name: Clone
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # aws-profile: terraform
        # role-to-assume: ${{secrets.AWS_CLUSTER_ROLE}}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install and configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        # https://github.com/aws/aws-cli/issues/6920#issuecomment-1117981158
        VERSION=v1.23.6
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        echo '${{ secrets.KUBECONFIG }}' | base64 --decode > kubeconfig.yaml

        touch ~/.aws/config
        touch ~/.aws/credentials
        echo '
        [profile terraform]
        region = us-east-1
        ' >> ~/.aws/config
        
        echo '
        [terraform]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        ' >> ~/.aws/credentials

    - name: Deploy
      run: |
        export DOCKER_IMAGE=${{ secrets.DOCKER_USERNAME }}/portfolio
        export IMAGE_TAG=${{ env.SHORT_SHA }}
        export KUBECONFIG=kubeconfig.yaml
        envsubst < k8s/kustomization.tmpl.yaml > k8s/kustomization.yaml
        kubectl kustomize k8s | kubectl apply -f -

    - name: Clean up
      run: |
        rm ~/.aws/credentials ~/.aws/config

      